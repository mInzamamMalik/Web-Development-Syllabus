/* Reset default margin and padding */
body,
ul,
li,
img {
  margin: 0;
  padding: 0;
}

/* Basic styling */
body {
  font-family: Arial, sans-serif;
  background-color: #f0f0f0;
}

.gallery {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  padding: 20px;
  max-width: 1000px;
  margin: 0 auto;
  justify-items: center;
}

.imgDiv {
  width: 100%;
  height: 300px;
  max-width: 300px;
  position: relative;
  overflow: hidden;
  border-radius: 10px;
  box-shadow: 6px 2px 18px rgba(0, 0, 0, 0.3);
}

.imgDiv img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
  transition: transform 0.3s;
}

.imgDiv:hover img {
  transform: scale(1.1);
}

.imgDiv::after {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.3);
  opacity: 0;
  transition: opacity 0.3s;
}

.imgDiv:hover::after {
  opacity: 1;
}

.heading {
  text-align: center;
}

@media screen and (min-width: 425px) {
  .gallery {
    grid-template-columns: 1fr 1fr;
  }
}

@media screen and (min-width: 768px) {
  .gallery {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media screen and (min-width: 1024px) {
  .gallery {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* In this example, we're using CSS Grid to create a responsive image gallery with three columns. Each image is wrapped in a container with the .image class, which includes the hover effects for the images. When hovering over an image, it scales up and a semi-transparent overlay appears. This creates a simple yet visually appealing hover effect for the images in the gallery.

Make sure to replace the src attributes of the <img> elements with the actual paths to your images.

Feel free to adjust the styling and gallery layout according to your preferences and design requirements. */
